<?xml version="1.0" encoding="utf-8"?>
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xml:id="book" version="5.1">
<info>
  <title>Interactivity Three Ways</title>
  <author>
    <personname>
      <firstname>Norm</firstname>
      <surname>Tovey-Walsh</surname>
    </personname>
    <email>ndw@nwalsh.com</email>
    <affiliation>
      <orgname>Saxonica</orgname>
    </affiliation>
  </author>
  <author>
    <personname>
      <firstname>Michael</firstname>
      <surname>Sperberg-McQueen</surname>
    </personname>
    <affiliation>
      <orgname>Black Mesa Technologies</orgname>
    </affiliation>
    <email>cmsmcq@blackmesatech.com</email>
  </author>
  <confgroup>
    <conftitle>Balisage: The Markup Conference</conftitle>
    <confdates>1-6 August 2021</confdates>
  </confgroup>
  <pubdate>2021-07-27</pubdate>
  <abstract>
    <para>Adding interactivity to a document presented on the web:
    “plain old JavaScript”, Saxon-JS, and XForms.</para>
  </abstract>
<!--
  <revhistory>
    <revision>
      <revnumber>1.0.0</revnumber>
      <date>2021-08-01</date>
      <authorinitials>ndw/cmsmcq</authorinitials>
      <revremark>First presented at Balisage 2021.</revremark>
    </revision>
  </revhistory>
-->
  <copyright>
    <year>2021</year>
    <holder>Norman Tovey-Walsh and Michael Sperberg-McQueen</holder>
  </copyright>
  <?db xlink-style="javascript" page-style="verso"?>
</info>

<chapter xml:id="overview">
  <title>Overview</title>
  <itemizedlist>
    <listitem>
      <para>The challenge</para>
    </listitem>
    <listitem>
      <para>Javascript solution</para>
    </listitem>
    <listitem>
      <para>XForms solution</para>
    </listitem>
    <listitem>
      <para>Saxon-JS solution</para>
    </listitem>
    <listitem>
      <para>Lessons learned</para>
    </listitem>
  </itemizedlist>
</chapter>


<chapter xml:id="task">
<title>The task</title>

<para>Compare different ways to provide
a little simple activity in a
mostly static document.</para>
<itemizedlist>
  <listitem>
    <para>single problem</para>
  </listitem>
  <listitem>
    <para>multiple solutions</para>
  </listitem>
  <listitem>
    <para>common ground-rules</para>
  </listitem>
</itemizedlist>
</chapter>

<chapter>
  <title>A picture is worth 1000 words</title>
  <para>
    <emphasis xlink:href="https://ndw.github.io/i3w/using-js/Program.html#schedule">Demo</emphasis>
  </para>
</chapter>
<chapter xml:id="groundrules">
  <title>The ground rules</title>
  <itemizedlist>
    <listitem>
      <para>workflow should not change much
      </para>
    </listitem>
    <listitem>
      <para>dynamic display in the browser (not static pre-calculation
      of 24 or so versions of schedule)
      </para>
    </listitem>
    <listitem>
      <para>schedule table authored by hand</para>
    </listitem>
  </itemizedlist>
  <para>More specific requirements in the paper.</para>
</chapter>

<chapter xml:id="playalong">
<title>Play along at home!</title>
<itemizedlist>
<listitem><para>All of the materials presented in this paper are available
at <link xlink:href="https://github.com/ndw/i3w/"/>.
</para></listitem>
<listitem><para>This presentation, the paper, and interactive versions of all
three techniques are published automatically from that repository 
to <link xlink:href="https://ndw.github.io/i3w/"/>.
</para></listitem>
</itemizedlist>
</chapter>

<chapter xml:id="poj">
<info>
<title>Plain old JavaScript</title>
</info>
<para>Question: Is it practical to add a bit of interactivity to a web page?</para>
<itemizedlist>
<listitem><para>Can it be done with “a small amount” of JavaScript
</para></listitem>
<listitem><para>Without any frameworks
</para></listitem>
<listitem><para>In a way that would “makes sense” to your average programmer
</para></listitem>
<listitem><para>And would be painlessly cross-platform in modern browsers?
</para></listitem>
</itemizedlist>
</chapter>

<chapter xml:id="poj2">
<info>
<title>Plain old JavaScript (continued)</title>
<annotation annotates="caniuse">
<para><link xlink:href="https://caniuse.com/"/>:</para>
<mediaobject>
<imageobject>
<imagedata fileref="caniuse.png" width="35%" align="center"/>
</imageobject>
</mediaobject>
</annotation>
</info>
<para>Answer: yes.</para>
<itemizedlist>
<listitem><para xml:id="caniuse">In general, modern JavaScript is a
lot more stable across platforms that it was historically.
</para></listitem>
<listitem><para>The <code>querySelector</code> and <code>querySelectorAll</code> APIs
make it practical to query HTML.
</para></listitem>
<listitem><para>The <code>innerHTML</code> API makes it practical to update the page.
</para></listitem>
<listitem><para>There are lots of APIs for responding to user behavior (form changes,
mouse clicks, etc.)
</para></listitem>
<listitem><para>The single-threaded, non-preemptive scheduler forces the programmer
to handle asynchrony rather directly, but you get used to it.
</para></listitem>
</itemizedlist>
</chapter>

<chapter xml:id="poj3">
<info>
<title>Plain old JavaScript (continued)</title>
</info>
<itemizedlist>
<listitem><para>The ad hoc approach taken here for a ~200 line script doesn’t scale.
</para></listitem>
<listitem><para>For thousands, or tens of thousands of lines of JavaScript code,
you’d probably want to invest in one of the big frameworks.
</para></listitem>
<listitem><para>They offer more declarative approaches and more automatic behavior.
</para></listitem>
</itemizedlist>
</chapter>

<chapter xml:id="xforms">
<info>
<title>XForms</title>
</info>

<itemizedlist>
  <listitem>
    <para>it works</para>
  </listitem>
  <listitem>
    <para>selecting and storing time zone</para>
  </listitem>
  <listitem>
    <para>HTML injection</para>
  </listitem>
  <listitem>
    <para>timezone calculations</para>
  </listitem>
  <listitem>
    <para>event handling</para>
  </listitem>
  <listitem>
    <para>some shortcomings</para>
  </listitem>
</itemizedlist>
</chapter>

<chapter>
  <info><title>It works</title></info>
  <para>The XForms solution:</para>
  <itemizedlist>
    <listitem>
      <para>meets the requirements</para>
    </listitem>
    <listitem>
      <para>requires 800k download (XSLT, Javascript)</para>
    </listitem>
    <listitem>
      <para>mostly pure XForms (some XSLTForms extensions)</para>
    </listitem>
  </itemizedlist>
</chapter>
<chapter>
  <info><title>Selecting time zone</title></info>
  <para>To select one out of several possible values,
  use an XForms <code>select1</code> widget:
  <programlisting language="xml">&lt;xf:select1 id="timezone-selector" ref="instance('ui')/tz"&gt;
  &lt;xf:label&gt;Timezone: &lt;/xf:label&gt;
  ...
  &lt;xf:item&gt;
    &lt;xf:label&gt;CDT  Chicago, IL, USA (UTC-05:00)&lt;/xf:label&gt;
    &lt;xf:value&gt;-05:00&lt;/xf:value&gt;
  &lt;/xf:item&gt;
  &lt;xf:item&gt;
    &lt;xf:label&gt;EDT  Rockville, MD, USA (UTC-04:00)&lt;/xf:label&gt;
    &lt;xf:value&gt;-04:00&lt;/xf:value&gt;
  &lt;/xf:item&gt;
  ...
  &lt;xf:item&gt;
    &lt;xf:label&gt;CEST Prague, CZE (UTC+02:00)&lt;/xf:label&gt;
    &lt;xf:value&gt;+02:00&lt;/xf:value&gt;
  &lt;/xf:item&gt;
  ...
&lt;/xf:select1&gt;</programlisting>
  </para>
</chapter>
<chapter>
  <info><title>Remembering time zone</title></info>
  <para>XForms has no variables.</para>
  <para>To store information, use an XML instance:
  here, <code>tz</code> element and <code>clock24</code> attribute.
    
<programlisting language="xml">&lt;head&gt;
  &lt;title&gt;Balisage 2020 Program&lt;/title&gt;
  ...

  &lt;xf:model id="m1"&gt;

    &lt;xf:instance id="program" src="./Program.xhtml"/&gt;

    &lt;xf:instance id="ui" xmlns=""&gt;
      &lt;ui-info clock24="false"&gt;
        &lt;tz&gt;-04:00&lt;/tz&gt;
	...
      &lt;/ui-info&gt;
    &lt;/xf:instance&gt;
    ...
  &lt;/xf:model&gt;
  ...
&lt;/head&gt;</programlisting>
  </para>
</chapter>

<chapter>
  <info><title>How do I get a checkbox*?</title></info>
  <para>To get the 24-hour clock checkbox ...</para>
  <para>... bind an instance node to an XSD type,
  so the XForms engine knows what it is.
  Checkboxes are a natural way to present Booleans.

<programlisting language="xml">&lt;xf:bind nodeset="instance('ui')/@clock24"
         type="xsd:boolean" /&gt;</programlisting>
  </para>
</chapter>
<chapter>
  <info><title>HTML injection</title></info>
  <para>HTML can be injected using an XForms <code>output</code> widget:

  <programlisting language="xml">&lt;p id="schedlink"&gt;
  &lt;xf:output mediatype="text/html"
             ref="instance('ui')/schedlink"/&gt;
&lt;/p&gt;</programlisting>
  </para>
  <para>Or, using the <code>transform()</code> function (not
  standardized):
<programlisting language="xml">&lt;td rowspan="2" data-slot="Monday/10:00"&gt;
  &lt;xf:output mediatype="text/html"
             value="transform(instance('program'),
                              'single-item.xsl',
			      false,
			      'slot',
			      'Monday/10:00')"/&gt;
&lt;/td&gt;</programlisting>
  </para>
</chapter>
<chapter>
  <info><title>Timezone display</title></info>
  <para>Display the time from the <code>ui</code> document, using
  an <code>output</code> widget:
<programlisting language="xml">&lt;th id="r10" class="time" scope="row"&gt;
  &lt;time datetime="2020-07-27T10:00:00-04:00"&gt;10:00&lt;/time&gt;
  &lt;xf:output
      mediatype="text/html"
      value="instance('ui')/slot-times/slot[@id='r10']"/&gt;
&lt;/th&gt;</programlisting>
  </para>
</chapter>
<chapter>
  <info><title>Timezone calculations (1)</title></info>
  <para>Calculate the times in the <code>ui</code> document, using
  XForms <code>bind</code> elements to specify the calculation.</para>
  <para>Start with slots for default and user-specified timezone offsets:
<programlisting language="xml">&lt;slot id="r10"
      datetime="2020-07-27T10:00:00-04:00"
      user-datetime="2020-07-27T10:00:00-04:00"
      user-time="" uh24="" uh12="" wrapped=""
      default="10:00"&gt;10:00&lt;/slot&gt;</programlisting>
  </para>
</chapter>
<chapter>
  <info><title>Timezone calculations (2)</title></info>
  <para>Calculate the times in the <code>ui</code> document, using
  XForms <code>bind</code> elements to specify the calculation.</para>
  <para>Use <code>bind</code> to define how the various values are calculated
  (here: hours part, minutes part, sign, and number of seconds
  since the epoch):
<programlisting language="xml">&lt;xf:bind nodeset="instance('ui')/tz/@h"
         type="xsd:integer"
         calculate="substring(.., 2, 2)"/&gt;
&lt;xf:bind nodeset="instance('ui')/tz/@m"
	 type="xsd:integer"
         calculate="substring(.., 5, 2)"/&gt;
&lt;xf:bind nodeset="instance('ui')/tz/@sign"
         calculate="substring(.., 1, 1)"/&gt;
&lt;xf:bind nodeset="instance('ui')/tz/@secs"
         calculate="if(../@sign = '-',
                    0 - (((../@h * 60) + ../@m) * 60),
                    0 + (((../@h * 60) + ../@m) * 60))"/&gt;</programlisting>
  </para>
  <para>Etc., etc., etc.
  All calculations
  use <code>xf:bind/@calculate</code>.</para>
  <para>Details in the paper.</para>
</chapter>
<chapter>
  <info><title>Event handling</title></info>
  <para>When the time zone changes, the 24-hour flag may also need
  changing.
  (West of Greenwich:  false; east:  true.)</para>
  <para>In principle, it's simple:
  <programlisting language="xml">  &lt;xf:setvalue ev:event="xforms-value-changed"
             ref="instance('ui')/@clock24"
             value="if(../tz/@sign = '-', 'true', 'false')"/&gt;</programlisting>
  </para>
  <para>In practice, it's more complicated.  (Details in paper.)</para>
</chapter>

<chapter>
  <info><title>Some shortcomings</title></info>
  <itemizedlist>
    <listitem>
      <para>XForms separates view from control; bad fit for requirements
      to modify the host document.</para>
    </listitem>
    <listitem>
      <para>This implementation interferes more with the base document
      than the other approaches.</para>
      <para>(But other XForms approaches are possible.*)</para>
    </listitem>
    <listitem>
      <para>Using XSLT to calculate values requires an extension.</para>
    </listitem>
  </itemizedlist>
</chapter>

<chapter xml:id="saxonjs">
<info>
<title>Saxon-JS</title>
</info>

<blockquote>
<para>Saxon-JS is an XSLT 3.0 processor written mainly in JavaScript,
and partly in XSLT. Saxon-JS is available for two JavaScript
environments: the browser, and Node.js.
</para>
</blockquote>

<itemizedlist>
  <listitem>
    <para>Is this the sort of problem you’d expect to be able to solve with XSLT?</para>
  </listitem>
  <listitem>
    <para>What else do we need?</para>
  </listitem>
  <listitem>
    <para>Setup and infrastructure</para>
  </listitem>
</itemizedlist>
</chapter>

<chapter xml:id="saxonjs1">
<info>
<title>Saxon-JS</title>
</info>
<para>Is this an XML problem? Of course it is. At its core, it’s just
an “almost identity” transformation:</para>
<programlisting language="xml"><![CDATA[<xsl:template match="td[@data-slot]">
  <xsl:variable name="event" select="key('slot', @data-slot)"/>

  <xsl:copy>
    <xsl:apply-templates select="@* except @class"/>

    <xsl:choose>
      <xsl:when test="$event">
        <xsl:sequence select="f:event-class(@class, $event)"/>
        <xsl:apply-templates select="$event"
                             mode="data-content"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:attribute name="class"
             select="normalize-space(@class || ' none')"/>
        <xsl:text>No talk scheduled.</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:copy>
</xsl:template>]]></programlisting>
</chapter>

<chapter xml:id="saxonjs2">
<info>
<title>Saxon-JS (continued)</title>
</info>
<para>There are three things we need to do beyond the transformation:</para>
<itemizedlist>
<listitem><para>Query the browser web page.
</para></listitem>
<listitem><para>Update the browser web page.
</para></listitem>
<listitem><para>Respond to events.
</para></listitem>
</itemizedlist>
</chapter>

<chapter xml:id="saxonjs3">
<info>
<title>Saxon-JS: Querying the browser web page</title>
</info>
<itemizedlist>
<listitem><para>The browser’s HTML object model isn’t quite the XDM object model.
</para></listitem>
<listitem><para>The <code>ixsl:page()</code> extension function shims things up:
</para>
<programlisting language="xml"><![CDATA[<xsl:template name="xsl:initial-template">
  <xsl:apply-templates select="ixsl:page()/html"/>
</xsl:template>]]></programlisting>
</listitem>
<listitem><para>Everything works the way you’d expect after you get
into the XDM.</para></listitem>
</itemizedlist>
</chapter>

<chapter xml:id="saxonjs4">
<info>
<title>Saxon-JS: Updating the browser web page</title>
</info>
<itemizedlist>
<listitem><para>It’s impractical to expose an API like <code>innerHTML</code> from within
XSLT.
</para></listitem>
<listitem><para>Instead, Saxon-JS leverages the existing mechanism for producing
result documents <code>xsl:result-document</code>:
</para>
<programlisting language="xml"><![CDATA[<xsl:result-document href="#schedule">
  <xsl:apply-templates select="ixsl:page()/html"/>
</xsl:result-document>]]></programlisting>
</listitem>
<listitem><para>If the <tag class="attribute">href</tag> attribute is a same-document
fragment identifier, the resulting output is appended to the element with the
corresponding ID.</para></listitem>
<listitem><para>The extension method <code>ixsl:replace-content</code> instructs
the processor to replace the content, rather than appending to it:
</para>
<programlisting language="xml"><![CDATA[<xsl:result-document href="#schedule" method="ixsl:replace-content">
  <xsl:apply-templates select="ixsl:page()/html"/>
</xsl:result-document>]]></programlisting>
</listitem>
<listitem><para>(It’s possible to write to any element, even elements that don’t
have IDs, by making them the context node first.)</para>
</listitem>
</itemizedlist>
</chapter>

<chapter xml:id="saxonjs5">
<info>
<title>Saxon-JS: Event handling</title>
</info>
<itemizedlist>
<listitem><para>The natural unit of computation in XSLT is the template.
</para></listitem>
<listitem><para>Saxon-JS leverages templates for event handling by using special
modes. A template in the <code>ixsl:onchange</code> mode, for example, will respond
to “change” events on the elements it matches:
</para>
<programlisting language="xml"><![CDATA[<xsl:template mode="ixsl:onchange" match="select[@id='tz']">
  <!-- Handle changes to the drop down -->
</xsl:template>]]></programlisting>
</listitem>
<listitem><para>A template in the <code>ixsl:onclick</code> mode will respond
to “click” events on the elements it matches:
</para>
<programlisting language="xml"><![CDATA[<xsl:template mode="ixsl:onclick" match="input[@id='clock24']">
  <!-- Handle clicks on the 24-hour clock checkbox -->
</xsl:template>]]></programlisting>
</listitem>
<listitem><para>Generally, for all event types that “bubble”, a template in the mode
<code>ixsl:on<replaceable>type</replaceable></code> will respond to
“<replaceable>type</replaceable>” events in the DOM.</para>
</listitem>
</itemizedlist>
</chapter>

<chapter xml:id="saxonjs6">
<info>
<title>Saxon-JS: But what about…</title>
</info>
<para>There are practical details that we didn’t have time to cover:</para>
<itemizedlist>
<listitem><para>Compiling the stylesheet.
</para></listitem>
<listitem><para>Configuring the HTML page.
</para></listitem>
<listitem><para>Getting Saxon-JS started.
</para></listitem>
<listitem><para>(And other infrastructure details.)
</para></listitem>
</itemizedlist>

<para>Check the paper, or the repository, or ask!</para>

<para>If you’d like a more detailed introduction, Debbie Lockett and I
have pitched a Saxon-JS tutorial for <citetitle>Declarative
Amsterdam</citetitle> this fall. If that’s accepted…</para>
</chapter>

<chapter xml:id="conclusions">
<info>
<title>Conclusions</title>
</info>
<itemizedlist>
<listitem><para>All three approaches work!
</para></listitem>
<listitem><para>Plain old JavaScript is the smallest: no runtime to download.
</para></listitem>
<listitem><para>Saxon-JS lets you take advantage of XSLT design patterns.
</para></listitem>
<listitem><para>XForms is probably the most declarative.
</para></listitem>
<listitem><para>Be careful how you formulate your requirements!
</para></listitem>
<listitem><para>Three axes to consider: standardized to implementation-specific,
declarative to imperative, and smaller user communities to larger.
</para></listitem>
</itemizedlist>
</chapter>

</book>
