buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
      force "org.xmlresolver:xmlresolver:3.0.2"
    }
  }

  dependencies {
    classpath 'org.docbook:schemas-docbook:5.2b11'
    classpath 'org.docbook:docbook-xslTNG:1.5.3'
    classpath 'org.xmlresolver:xmlresolver:3.0.2'
  }
}

plugins {
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.9.3'
  id 'com.nwalsh.gradle.docker.container' version '0.0.4'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

configurations {
  docbook
}

dependencies {
  docbook (
    [group: 'org.docbook', name: 'schemas-docbook', version: '5.2b10a4'],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: '1.5.2']
  )
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.docker.DockerContainer

ext {
  // If the 'dockerup' task needs to start containers, it sets
  // docker_started to true. This is used by the 'install_node' task
  // so that it only does the install once.
  docker_started = false
  c_i3whttp = "i3whttp"
  c_i3wnode = "i3wnode"
  containers = [:]
}

defaultTasks "website"

// ======================================================================

import static groovy.io.FileType.DIRECTORIES
def pygmentize = findPygmentize()
def findPygmentize() {
  def path = System.getenv()["PATH"]
  def script = null
  path.split(":+").each { segment ->
    if (segment.endsWith("/.pyenv/shims")) {
      // Ok, we found pyenv, now can we find pygmentize?
      def pyenv = new File("${segment.substring(0, segment.length() - 6)}/versions")
      def versions = []
      pyenv.traverse(type: DIRECTORIES, maxDepth: 0) { dir ->
        def testfile = new File("${dir}/bin/pygmentize")
        if (testfile.exists() && testfile.canExecute()) {
          script = testfile.toString()
        }
      }
    }
  }

  if (script == null) {
    println("Could not find pygmentize")
    script = "" // nevermind
  }

  return script
}

System.setProperty("org.docbook.extensions.pygmentize", pygmentize)

task configureEnvironment() {
  def envVars = [:]
  envVars['PYGMENTIZE'] = pygmentize
  tasks.withType(Exec) {
    environment << envVars
  }
}

// ======================================================================

docker_container.configure {
  workingDir = "docker"
}

saxon.configure {
  entityResolverClass "org.xmlresolver.Resolver"
  uriResolverClass "org.xmlresolver.Resolver"
  sourceSaxParser "org.xmlresolver.tools.ResolvingXMLReader"
  stylesheetSaxParser "org.xmlresolver.tools.ResolvingXMLReader"
  initializer 'org.docbook.xsltng.extensions.Register'
}

// ======================================================================

// ======================================================================

task website(dependsOn: ["plain_old_js", "saxon_js", "xforms",
                         "paper_html", "index_html", "presentation_html"]) {
  // nop
}

// ======================================================================
// Using Plain-old-JavaScript

task plain_old_js(dependsOn: ["plain_old_js_files", "plain_old_js_resources",
                              "plain_old_js_aug"]) {
  // nop
}

task plain_old_js_aug(type: SaxonXsltTask) {
  input "${projectDir}/src/main/resources/Program-2021.html"
  output "${buildDir}/website/i3w/using-js/Program.html"
  stylesheet "${projectDir}/tools/augment-for-js.xsl"
}

task plain_old_js_files(type: Copy) {
  into "${buildDir}/website/i3w/using-js/js"
  from "${projectDir}/src/main/using-js/js"
}

task plain_old_js_resources(type: Copy) {
  into "${buildDir}/website/i3w/using-js"
  from ("${projectDir}/src/main/resources") {
    exclude "Program-2020.html"
    exclude "Program-2021.html"
    exclude "paper/**"
    exclude "presentation/**"
  }
}
  
// ======================================================================
// Using Saxon-JS

task saxon_js(dependsOn: ["saxon_js_files", "saxon_js_resources",
                          "saxon_js_aug", "saxon_js_compile"]) {
  // nop
}

task saxon_js_aug(type: SaxonXsltTask) {
  input "${projectDir}/src/main/resources/Program-2021.html"
  output "${buildDir}/website/i3w/using-saxon-js/Program.html"
  stylesheet "${projectDir}/tools/augment-for-saxon-js.xsl"
}

task saxon_js_files(type: Copy) {
  into "${buildDir}/website/i3w/using-saxon-js/js"
  from "${projectDir}/src/main/using-saxon-js/js"
}

task saxon_js_resources(type: Copy) {
  into "${buildDir}/website/i3w/using-saxon-js"
  from ("${projectDir}/src/main/resources") {
    exclude "Program-2020.html"
    exclude "Program-2021.html"
    exclude "paper/**"
    exclude "presentation/**"
  }
}

task saxon_js_compile(dependsOn: ["dockerup"]) {
  inputs.file "${projectDir}/src/main/using-saxon-js/xslt/schedule.xsl"
  outputs.file "${buildDir}/website/i3w/using-saxon-js/xslt/schedule.sef.json"

  if (skip_docker == "true") {
    doLast {
      println("Cannot compile stylesheet; using published version.")
      new File("${buildDir}/website/i3w/using-saxon-js/xslt/schedule.sef.json").text =
        new URL('https://ndw.github.io/i3w/using-saxon-js/xslt/schedule.sef.json').text
    }
    doFirst {
      mkdir "${buildDir}/website/i3w/using-saxon-js/xslt"
    }
  } else {
    doLast {
      // Note: this command runs in the Docker container; the paths /src and
      // /website are mounted to the right locations in the container!
      DockerContainer.docker {
        verbose = true
        command = "exec"
        args = ["-i", "${containers[c_i3wnode]}", "node", "node_modules/xslt3/xslt3.js",
                "-xsl:/src/main/using-saxon-js/xslt/schedule.xsl",
                "-export:/website/i3w/using-saxon-js/xslt/schedule.sef.json",
                "-nogo", "-ns:##html5"]
      }
    }
  }
}
  
// ======================================================================
// Using XForms

task xforms(dependsOn: ["xforms_files", "xforms_resources"]) {
  // nop
}

task xforms_files(type: Copy) {
  into "${buildDir}/website/i3w/using-xforms"
  from "${projectDir}/src/main/using-xforms"
}

task xforms_resources(type: Copy) {
  into "${buildDir}/website/i3w/using-xforms"
  from ("${projectDir}/src/main/resources") {
    exclude "Program-2020.html"
    exclude "Program-2021.html"
    exclude "paper/**"
    exclude "presentation/**"
  }
}

// ======================================================================
// Balisage paper

task paper_html(type: SaxonXsltTask, dependsOn: ["paper_resources"]) {
  input "${projectDir}/src/main/xml/paper.xml"
  output "${buildDir}/website/i3w/paper/index.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  parameters (
    'debug': '',
    'resource-base-uri': '/i3w/paper/',
    'css-links': 'css/docbook.css css/docbook-screen.css css/paper.css'
  )
}

task paper_resources() {
  def dbjar = null
  configurations.docbook.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  doFirst {
    copy {
      into "${buildDir}/website/i3w/paper"
      from ("${projectDir}/src/main/resources/paper")
    }
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }
    copy {
      into "${buildDir}/website/i3w/paper"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
    }
  }

  doLast {
    delete "${buildDir}/website/i3w/paper/org"
  }
}
paper_resources.onlyIf { !file("${buildDir}/website/i3w/paper/css/docbook.css").exists() }

// ======================================================================
// Balisage presentation

task presentation_html(type: SaxonXsltTask, dependsOn: ["presentation_resources"]) {
  input "${projectDir}/src/main/xml/presentation.xml"
  output "${buildDir}/website/i3w/presentation/index.html"
  stylesheet "${projectDir}/tools/presentation.xsl"
  parameters (
    'debug': '',
    'chunk': 'index.html',
    'chunk-output-base-uri': "${buildDir}/website/i3w/presentation/",
    'mediaobject-input-base-uri': "file:${projectDir}/src/main/xml/",
    'resource-base-uri': '/i3w/presentation/',
    'annotation-style': 'javascript',
    'profile-outputformat': 'online',
    'persistent-toc': true,
  )
}

task presentation_resources() {
  def dbjar = null
  configurations.docbook.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  doFirst {
    copy {
      into "${buildDir}/website/i3w/presentation"
      from ("${projectDir}/src/main/resources/presentation")
    }
  }

  doFirst {
    copy {
      into "${buildDir}/website/i3w/presentation"
      from ("${projectDir}/src/main/xml") {
        include "caniuse.png"
      }
    }
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }
    copy {
      into "${buildDir}/website/i3w/presentation"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
    }
  }

  doLast {
    delete "${buildDir}/website/i3w/presentation/org"
  }
}
paper_resources.onlyIf { !file("${buildDir}/website/i3w/presentation/css/docbook.css").exists() }
  
// ======================================================================

task setup_node(type: Copy) {
  into "${buildDir}/node"
  from "${projectDir}/src/main/node"
  doFirst {
    mkdir "${buildDir}/node"
    mkdir "${buildDir}/website"
  }
}

task install_node(dependsOn: ["dockerup"]) {
  doLast {
    if (docker_started) {
      if (System.getenv('GRADLE_CI_BUILD') == 'true') {
        exec {
          workingDir "${buildDir}/node"
          commandLine "npm", "install"
        }
      } else {
        DockerContainer.docker {
          verbose = true
          command = "exec"
          args = ["-i", containers[c_i3wnode], "npm", "install"]
        }
      }
    }
  }
}

// ======================================================================
// Homepage

task index_html(type: SaxonXsltTask) {
  input "${projectDir}/src/main/xml/homepage.xml"
  output "${buildDir}/website/i3w/index.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  parameters (
    'debug': '',
    'css-links': 'paper/css/docbook.css paper/css/docbook-screen.css paper/css/paper.css',
    'persistent-toc-css': 'paper/css/docbook-toc.css',
    'persistent-toc-js': 'paper/js/persistent-toc.js'
  )
}

// ======================================================================

if (skip_docker == "true") {
  task dockerup() {
    doLast {
      println("Skipping docker; stylesheet cannot be compiled.")
    }
  }
} else {
  task dockerup(dependsOn: ["setup_node"]) {
    doLast {
      docker_started = false
      if (System.getenv('GRADLE_CI_BUILD') == 'true') {
        docker_started = true
      } else {
        if (!DockerContainer.allRunning([c_i3whttp, c_i3wnode])) {
          DockerContainer.compose {
            command = "up"
            args = ["-d"]
          }
          docker_started = true
        }
      }
    }

    doLast {
      containers = DockerContainer.containers()
    }

    doFirst {
      mkdir ("${buildDir}/website")
    }

    finalizedBy install_node
  }
}

task dockerdown() {
  doLast {
    if (DockerContainer.anyRunning([c_i3whttp, c_i3wnode])) {
      DockerContainer.compose {
        command = "down"
      }
    }
  }

  doLast {
    containers = [:]
  }
}

// ======================================================================

task helloWorld() {
  doLast {
    println("Hello, world.")
    configurations.each { c ->
      println(c.name)
    }
    /*
    configurations.runtime.resolve().each { path ->
      println(path)
    }
     */
  }
}
